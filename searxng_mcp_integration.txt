# SearXNG MCP Server Integration Guide for Claude Code CLI

## üîç Executive Summary

This comprehensive guide provides a production-ready implementation for integrating the SearXNG MCP (Model Context Protocol) server into Claude Code CLI. SearXNG is a privacy-respecting metasearch engine that aggregates results from multiple search engines without tracking users.

**Key Benefits:**
- ‚úÖ Privacy-focused web search capabilities
- ‚úÖ Zero-configuration setup with public instances
- ‚úÖ Support for private/self-hosted instances
- ‚úÖ Advanced search features (pagination, time filters, language selection)
- ‚úÖ Seamless integration with Claude Code CLI

---

## üìã Table of Contents

1. [Architecture Overview](#architecture-overview)
2. [Prerequisites](#prerequisites)
3. [Installation Methods](#installation-methods)
4. [Configuration Options](#configuration-options)
5. [Integration with Claude Code CLI](#integration-with-claude-code-cli)
6. [Advanced Features](#advanced-features)
7. [Troubleshooting](#troubleshooting)
8. [Security Considerations](#security-considerations)

---

## üèóÔ∏è Architecture Overview

### What is SearXNG?

SearXNG is a free internet metasearch engine that:
- Aggregates results from 70+ search engines
- Respects user privacy (no tracking, no profiling)
- Can be self-hosted or accessed via public instances
- Provides results in JSON format for programmatic access

### What is MCP?

Model Context Protocol (MCP) is an open standard developed by Anthropic that enables AI assistants to:
- Discover and use external tools dynamically
- Access resources from various services
- Execute prompts with contextual awareness

### Integration Flow

```
Claude Code CLI ‚Üê‚Üí MCP Client ‚Üê‚Üí SearXNG MCP Server ‚Üê‚Üí SearXNG Instance(s)
```

---

## üîß Prerequisites

### System Requirements

- **Operating System:** macOS 10.15+, Ubuntu 20.04+/Debian 10+, or Windows via WSL
- **Node.js:** v16 or higher (v20+ recommended)
- **npm:** v7 or higher
- **Claude Code CLI:** Latest version

### Installation Check

```bash
# Verify Node.js version
node --version  # Should be v16+

# Verify npm version
npm --version   # Should be v7+

# Verify Claude Code CLI installation
claude --version

# If Claude Code CLI is not installed
npm install -g @anthropic-ai/claude-code
```

### Important First-Time Setup

**CRITICAL:** Before using Claude Code with MCP servers, you must run it once with dangerous permissions to initialize:

```bash
claude --dangerously-skip-permissions
```

This creates the necessary configuration directories and files.

---

## üì¶ Installation Methods

### Method 1: NPX (Recommended - Zero Configuration)

The simplest method that works out-of-the-box by automatically selecting a random public SearXNG instance.

**Advantages:**
- No installation required
- Automatic instance selection
- Always uses latest version
- No maintenance needed

**Installation Command:**

```bash
claude mcp add searxng-zero-config --scope user -- npx -y @tisddm/searxng-mcp
```

**Configuration (Optional):**

If you want to use a specific SearXNG instance:

```bash
claude mcp add searxng-custom --scope user \
  --env SEARXNG_URL=https://searx.example.com \
  -- npx -y @tisddm/searxng-mcp
```

---

### Method 2: Global NPM Installation

Install the SearXNG MCP server globally for better performance and offline access.

**Installation:**

```bash
# Install globally
npm install -g @tisddm/searxng-mcp

# Add to Claude Code CLI (user scope)
claude mcp add searxng-global --scope user -- searxngmcp

# Or with environment variables
claude mcp add searxng-global --scope user \
  --env SEARXNG_URL=https://searx.example.com \
  --env SEARXNG_USERNAME=your_username \
  --env SEARXNG_PASSWORD=your_password \
  -- searxngmcp
```

---

### Method 3: Enhanced SearXNG MCP (Advanced Features)

For advanced users requiring category-aware search, web scraping, and PDF support.

**Installation:**

```bash
# Using NPX
claude mcp add searxng-enhanced --scope user \
  --env SEARXNG_ENGINE_API_BASE_URL=http://localhost:8080/search \
  --env DESIRED_TIMEZONE=America/New_York \
  -- npx -y mcp-searxng-enhanced

# Using Docker
claude mcp add searxng-enhanced --scope user -- \
  docker run -i --rm --network=host \
  -e SEARXNG_ENGINE_API_BASE_URL="http://127.0.0.1:8080/search" \
  overtlids/mcp-searxng-enhanced:latest
```

---

### Method 4: Alternative MCP-SearXNG Implementation

Another robust implementation with URL content reading and caching.

**Installation:**

```bash
# Using NPX
claude mcp add mcp-searxng --scope user \
  --env SEARXNG_URL=http://localhost:8080 \
  -- npx -y mcp-searxng

# Using Docker
claude mcp add mcp-searxng --scope user -- \
  docker run -i --rm \
  -e SEARXNG_URL=http://localhost:8080 \
  isokoliuk/mcp-searxng:latest
```

---

### Method 5: Local Development Installation

For developers who want to modify or contribute to the MCP server.

**Setup:**

```bash
# Clone the repository
git clone https://github.com/tisDDM/searxng-mcp.git
cd searxng-mcp

# Install dependencies
npm install

# Build the project
npm run build

# Add to Claude Code CLI with local path
claude mcp add searxng-local --scope user -- \
  node /absolute/path/to/searxng-mcp/build/index.js

# Or with environment variables
claude mcp add searxng-local --scope user \
  --env SEARXNG_URL=https://searx.example.com \
  -- node /absolute/path/to/searxng-mcp/build/index.js
```

**Development Commands:**

```bash
# Watch mode for development
npm run watch

# Run inspector for testing
npm run inspector
```

---

## ‚öôÔ∏è Configuration Options

### Environment Variables

All SearXNG MCP implementations support these environment variables:

| Variable | Description | Default | Required |
|----------|-------------|---------|----------|
| `SEARXNG_URL` | URL of your SearXNG instance | Random public instance | No |
| `USE_RANDOM_INSTANCE` | Enable random instance selection | `true` | No |
| `SEARXNG_USERNAME` | Username for basic auth | - | No |
| `SEARXNG_PASSWORD` | Password for basic auth | - | No |
| `HTTP_PROXY` | HTTP proxy URL | - | No |
| `HTTPS_PROXY` | HTTPS proxy URL | - | No |
| `MCP_TIMEOUT` | Connection timeout (ms) | `5000` | No |
| `MAX_MCP_OUTPUT_TOKENS` | Max output tokens | `25000` | No |

### Configuration Scopes

Claude Code supports three configuration scopes:

1. **Local Scope** (default): Available only in current project
2. **Project Scope**: Shared with team via `.mcp.json` file
3. **User Scope**: Available across all your projects

**Examples:**

```bash
# Local scope (current project only)
claude mcp add searxng-local -- npx -y @tisddm/searxng-mcp

# Project scope (shared with team)
claude mcp add searxng-project --scope project -- npx -y @tisddm/searxng-mcp

# User scope (all your projects)
claude mcp add searxng-user --scope user -- npx -y @tisddm/searxng-mcp
```

---

## üöÄ Integration with Claude Code CLI

### Step 1: Verify Installation

```bash
# List all configured MCP servers
claude mcp list

# Expected output should include your SearXNG server
# Example:
# searxng-zero-config (user) - connected
```

### Step 2: Test Connection

```bash
# Start Claude Code with MCP debugging
MCP_DEBUG=true claude

# In Claude Code session, try:
# "Search for recent developments in quantum computing"
```

### Step 3: Use MCP Commands

Within Claude Code, you can interact with SearXNG MCP using:

**Natural Language:**
```
"Search the web for Python async programming best practices"
"Find recent news about AI developments"
"Look up documentation for React hooks"
```

**Direct Commands:**
```bash
# List available MCP resources
@

# List available MCP prompts
/

# Authenticate with MCP server (if required)
/mcp
```

---

## üî• Advanced Features

### 1. Search with Parameters

The SearXNG MCP server supports advanced search parameters:

```javascript
// Example tool call parameters
{
  "query": "machine learning frameworks",
  "language": "en",
  "time_range": "year",
  "categories": ["general", "news"],
  "safesearch": 1,
  "pageno": 1,
  "max_results": 10
}
```

**Supported Parameters:**

- **query** (string, required): Search query
- **language** (string): Language code (e.g., 'en', 'de', 'fr')
- **time_range** (string): 'day', 'week', 'month', 'year'
- **categories** (array): ['general', 'images', 'news', 'videos', 'files', 'map', 'social media']
- **engines** (array): Specific search engines to use
- **safesearch** (number): 0 (off), 1 (moderate), 2 (strict)
- **pageno** (number): Page number (minimum 1)
- **max_results** (number): Maximum results (1-50)

### 2. URL Content Reading

Some implementations (mcp-searxng) include URL content reading:

```javascript
// Tool: web_url_read
{
  "url": "https://example.com/article"
}
```

This converts web content to markdown format for easier processing.

### 3. Using Proxy Support

For corporate environments or regions with restrictions:

```bash
# Add server with proxy configuration
claude mcp add searxng-proxy --scope user \
  --env SEARXNG_URL=http://localhost:8080 \
  --env HTTP_PROXY=http://proxy.company.com:8080 \
  --env HTTPS_PROXY=http://proxy.company.com:8080 \
  -- npx -y mcp-searxng

# With authentication
claude mcp add searxng-proxy-auth --scope user \
  --env HTTP_PROXY=http://username:password@proxy.company.com:8080 \
  -- npx -y mcp-searxng
```

### 4. Managing Output Tokens

To prevent overwhelming context with large results:

```bash
# Increase token limit for large searches
MAX_MCP_OUTPUT_TOKENS=50000 claude

# Or set globally
export MAX_MCP_OUTPUT_TOKENS=50000
```

### 5. Project-Based Configuration

For team collaboration, create a `.mcp.json` file in your project root:

```json
{
  "mcpServers": {
    "searxng-team": {
      "command": "npx",
      "args": ["-y", "@tisddm/searxng-mcp"],
      "env": {
        "SEARXNG_URL": "${SEARXNG_URL:-https://default-instance.com}",
        "USE_RANDOM_INSTANCE": "false"
      }
    }
  }
}
```

Team members can override with local environment variables:

```bash
export SEARXNG_URL=https://my-private-instance.com
claude
```

---

## üîê Security Considerations

### 1. Private Instance Deployment

For maximum privacy and control, deploy your own SearXNG instance:

**Using Docker:**

```bash
# Pull and run SearXNG
docker run -d --name=searxng \
  -p 8080:8080 \
  -v "$PWD/searxng:/etc/searxng" \
  -e "BASE_URL=http://localhost:8080/" \
  -e "INSTANCE_NAME=my-searxng" \
  --restart always \
  searxng/searxng:latest

# Add to Claude Code CLI
claude mcp add searxng-private --scope user \
  --env SEARXNG_URL=http://localhost:8080 \
  -- npx -y @tisddm/searxng-mcp
```

**Using Installation Scripts:**

```bash
# Install SearXNG on Linux
wget -O install.sh https://raw.githubusercontent.com/searxng/searxng/master/utils/searxng.sh
bash install.sh install all
```

### 2. Authentication Setup

For password-protected instances:

```bash
claude mcp add searxng-secure --scope user \
  --env SEARXNG_URL=https://searx.example.com \
  --env SEARXNG_USERNAME=myuser \
  --env SEARXNG_PASSWORD=mypassword \
  -- npx -y @tisddm/searxng-mcp
```

### 3. API Key Management

**Never hardcode credentials!** Use environment variables:

```bash
# Set in shell profile (~/.bashrc, ~/.zshrc)
export SEARXNG_USERNAME="myuser"
export SEARXNG_PASSWORD="mypassword"

# Use in Claude Code CLI without exposing values
claude mcp add searxng-secure --scope user \
  --env SEARXNG_USERNAME \
  --env SEARXNG_PASSWORD \
  -- npx -y @tisddm/searxng-mcp
```

### 4. Network Security

- Use HTTPS for remote instances
- Configure firewalls to restrict access
- Implement rate limiting on your instance
- Monitor access logs regularly

---

## üêõ Troubleshooting

### Common Issues and Solutions

#### 1. "Connection closed" Error

**Problem:** MCP server fails to start on Windows.

**Solution:** Use `cmd /c` wrapper:

```bash
claude mcp add searxng --scope user -- cmd /c npx -y @tisddm/searxng-mcp
```

#### 2. "Request failed with status code 429"

**Problem:** Public instance rate limiting.

**Solutions:**
- Use a different public instance
- Deploy your own SearXNG instance
- Reduce search frequency
- Use `USE_RANDOM_INSTANCE=true` to rotate instances

```bash
claude mcp add searxng --scope user \
  --env USE_RANDOM_INSTANCE=true \
  -- npx -y @tisddm/searxng-mcp
```

#### 3. "Server not found" Error

**Problem:** MCP server not properly registered.

**Solution:**

```bash
# Remove existing configuration
claude mcp remove searxng

# Re-add with correct parameters
claude mcp add searxng --scope user -- npx -y @tisddm/searxng-mcp

# Verify
claude mcp list
```

#### 4. Timeout Issues

**Problem:** Searches taking too long.

**Solution:** Increase timeout:

```bash
MCP_TIMEOUT=10000 claude  # 10 seconds
```

#### 5. Large Output Warning

**Problem:** Search results exceed token limit.

**Solution:**

```bash
# Increase limit
MAX_MCP_OUTPUT_TOKENS=50000 claude

# Or reduce max_results in searches
# (ask Claude to limit results to 5-10 items)
```

#### 6. Authentication Failures

**Problem:** Cannot connect to private instance.

**Solution:**

```bash
# Verify credentials
curl -u username:password https://searx.example.com/search?q=test

# Test MCP server directly
echo '{"jsonrpc":"2.0","method":"initialize","params":{"protocolVersion":"2024-11-05"},"id":1}' | \
  SEARXNG_URL=https://searx.example.com \
  SEARXNG_USERNAME=username \
  SEARXNG_PASSWORD=password \
  npx -y @tisddm/searxng-mcp
```

### Debugging Tips

1. **Enable Debug Mode:**
   ```bash
   MCP_DEBUG=true claude
   ```

2. **Test MCP Server Independently:**
   ```bash
   npm run inspector  # In server directory
   ```

3. **Check Logs:**
   ```bash
   # Claude Code logs location (macOS)
   tail -f ~/Library/Logs/Claude/claude.log
   
   # Linux
   tail -f ~/.local/share/Claude/logs/claude.log
   ```

4. **Verify SearXNG Instance:**
   ```bash
   # Test instance directly
   curl "https://searx.example.com/search?q=test&format=json"
   ```

---

## üìä Performance Optimization

### 1. Local Instance for Best Performance

Deploy SearXNG locally for:
- Fastest response times
- No rate limiting
- Full control over search engines
- Custom result formatting

### 2. Caching Strategy

The mcp-searxng implementation includes intelligent caching:
- URL content cached with TTL
- Reduces redundant requests
- Improves response times

### 3. Search Optimization Tips

```javascript
// Good: Specific, targeted searches
query: "React hooks useEffect cleanup"
max_results: 5

// Avoid: Broad, high-volume searches
query: "programming"
max_results: 50
```

---

## üîÑ Maintenance and Updates

### Updating the MCP Server

**NPX (Zero Configuration):**
```bash
# Always uses latest version automatically
# No update needed
```

**Global Installation:**
```bash
# Update to latest version
npm update -g @tisddm/searxng-mcp

# Or reinstall
npm uninstall -g @tisddm/searxng-mcp
npm install -g @tisddm/searxng-mcp
```

**Local Development:**
```bash
cd /path/to/searxng-mcp
git pull origin main
npm install
npm run build
```

### Monitoring Health

```bash
# Check server status
claude mcp list

# Test connection
echo "Search for test query" | claude
```

---

## üéØ Best Practices

### 1. Configuration Management

- ‚úÖ Use user scope for personal tools
- ‚úÖ Use project scope for team collaboration
- ‚úÖ Store sensitive data in environment variables
- ‚úÖ Document your configuration in README

### 2. Search Query Optimization

- ‚úÖ Be specific in search queries
- ‚úÖ Use time_range for recent information
- ‚úÖ Limit max_results to necessary amount
- ‚úÖ Leverage categories for focused searches

### 3. Privacy and Security

- ‚úÖ Use private instances for sensitive searches
- ‚úÖ Enable HTTPS for all remote connections
- ‚úÖ Implement authentication for exposed instances
- ‚úÖ Monitor access logs regularly

### 4. Team Collaboration

- ‚úÖ Share .mcp.json in version control
- ‚úÖ Use environment variable substitution
- ‚úÖ Document setup in project README
- ‚úÖ Provide default instance URLs

---

## üö¶ Quick Start Checklist

- [ ] Install Node.js v16+ and npm v7+
- [ ] Install Claude Code CLI
- [ ] Run `claude --dangerously-skip-permissions` once
- [ ] Choose installation method (NPX recommended)
- [ ] Add SearXNG MCP server: `claude mcp add searxng --scope user -- npx -y @tisddm/searxng-mcp`
- [ ] Verify installation: `claude mcp list`
- [ ] Test search: Start Claude and search for something
- [ ] Configure environment variables (optional)
- [ ] Deploy private instance (optional but recommended)

---

## üìö Additional Resources

### Official Documentation
- [SearXNG Documentation](https://docs.searxng.org)
- [Claude Code MCP Docs](https://docs.claude.com/en/docs/claude-code/mcp)
- [Model Context Protocol](https://modelcontextprotocol.io)

### SearXNG MCP Implementations
- [tisDDM/searxng-mcp](https://github.com/tisDDM/searxng-mcp) - Zero-config implementation
- [ihor-sokoliuk/mcp-searxng](https://github.com/ihor-sokoliuk/mcp-searxng) - Feature-rich implementation
- [OvertliDS/mcp-searxng-enhanced](https://github.com/OvertliDS/mcp-searxng-enhanced) - Enhanced with categories

### Public SearXNG Instances
- [SearX.space](https://searx.space) - List of public instances

### Community
- IRC: #searxng on libera.chat
- Matrix: #searxng:matrix.org

---

## üéâ Success Indicators

You'll know your integration is working when:

1. ‚úÖ `claude mcp list` shows your SearXNG server as "connected"
2. ‚úÖ Claude can successfully execute web searches
3. ‚úÖ Search results appear in markdown format
4. ‚úÖ No timeout or connection errors
5. ‚úÖ Results are relevant and up-to-date

---

## üîÆ Future Enhancements

Consider these advanced integrations:

1. **Multi-Instance Load Balancing:** Rotate between multiple SearXNG instances
2. **Result Caching:** Implement Redis for persistent caching
3. **Custom Search Engines:** Configure specific engines per query type
4. **Result Filtering:** Post-process results with custom logic
5. **Analytics Integration:** Track search patterns and optimize

---

## üìù License and Credits

- **SearXNG:** AGPLv3
- **SearXNG MCP Implementations:** MIT License
- **Claude Code CLI:** Proprietary (Anthropic)

This guide is provided as-is for educational purposes. Always verify security and privacy implications for your specific use case.

---

## üí° Final Notes

This integration transforms Claude Code CLI into a powerful research and development tool with privacy-respecting web search capabilities. The zero-configuration approach makes it accessible to all users, while advanced options cater to privacy-conscious developers and enterprises.

**Remember:** The beauty of MCP is its extensibility. Once you master SearXNG integration, you can apply the same principles to integrate dozens of other services, creating a truly customized AI development environment.

Happy searching! üöÄ